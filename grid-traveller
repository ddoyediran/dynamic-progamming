const gridTraveller = (m, n) => {
    // base case: if n & m equals to 1, we should return 1
    if(m === 1 && n === 1) return 1;

    // if either m or n is zero, we should return 0
    if(m === 0 || n === 0) return 0

    // the recursive case
    return gridTraveller(m - 1, n) + gridTraveller(m, n-1);
}


console.log(gridTraveller(1, 1)) // 1
console.log(gridTraveller(0, 1)) // 0
console.log(gridTraveller(2, 3)) // 3
console.log(gridTraveller(3, 3)) // 6
console.log(gridTraveller(18, 18)) // 2333606220


// Optimized solution using memoize 


const gridTraveller = (m, n, memo = {}) => {
    let key = m + ',' + n

    // check if m and n is in the memoand if true should return their value
    if(key in memo) return memo[key]

    // base case: if n & m equals to 1, we should return 1
    if(m === 1 && n === 1) return 1;

    // if either m or n is zero, we should return 0
    if(m === 0 || n === 0) return 0

    // the recursive case and store the value in the memo object
    memo[key] = gridTraveller(m - 1, n, memo) + gridTraveller(m, n-1, memo);
    return memo[key];
}


console.log(gridTraveller(1, 1)) // 1
console.log(gridTraveller(0, 1)) // 0
console.log(gridTraveller(2, 3)) // 3
console.log(gridTraveller(3, 3)) // 6
console.log(gridTraveller(18, 18)) // 2333606220


// the first soultion will take a lot of time while the second runs very fast
